heat_template_version: 2015-04-30

description: Deploys a Docker Swarm at MTA CLOUD @ SZTAKI

parameters:
  docker_node_count:
    type: number
    label: Docker Hosts
    description: Number of docker hosts (excluding the master)
    default: 2

  public_ip:
    type: string
    label: Public IP
    description: Public IP address to be assigned to SWARM master
    default: 193.224.59.251

  private_net_name:
    type: string
    label: Private Network Name
    description: Name of private network from which private IP addresses will be allocated
    default: SECSCAN_net

  instance_flavor:
    type: string
    label: Flavor
    default: m1.small
    description: Flavor to use for Docker
    constraints:
    - allowed_values:
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge

  instance_image:
    type: string
    label: Image
    default: Ubuntu 16.04 LTS Cloud image
    description: Image to be used for all servers in this stack

resources:
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
      
  #Networking
  docker_floating_ip:
    type : AWS::EC2::EIPAssociation
    properties :
        InstanceId: { get_resource: docker_master }
        EIP: { get_param: public_ip }
      
  docker_master_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net_name }
      security_groups: [{ get_resource: docker_security_group }]
  
  docker_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description:
      name: docker-security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_mode: remote_group_id
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_mode: remote_group_id
          protocol: udp
          port_range_min: 1
          port_range_max: 65535

  # Wait condition for swarm token sharing
  master_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: master_wait_handle}
      count: 7
      timeout: 600

  master_wait_handle:
    type: OS::Heat::WaitConditionHandle          
          
  #Master Server
  docker_master:
    type: OS::Nova::Server
    properties:
      name: swarm_master
      image: { get_param: instance_image }
      flavor: { get_param: instance_flavor }
      key_name: { get_resource: ssh_key }
      networks:
        - port: { get_resource: docker_master_port }
      security_groups:
        - docker-security-group
      user_data_format: RAW
      user_data: 
        str_replace:
          template: |
            #!/bin/bash
            echo "+ startup script starting"
            curl -fsSL https://yum.dockerproject.org/gpg | sudo apt-key add -
            sudo add-apt-repository "deb https://apt.dockerproject.org/repo/ ubuntu-$(lsb_release -cs) main"
            sudo apt-get update
            sudo apt-get -y install docker-engine gawk
            sudo service docker start
            sudo docker run --rm -v /root/certs:/certs ehazlett/certm -d /certs bundle generate -o swarm --host proxy --host 127.0.0.1
            sudo mkdir -p /etc/systemd/system/docker.service.d
            sudo echo -e "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/root/certs/ca.pem --tlscert=/root/certs/server.pem --tlskey=/root/certs/server-key.pem --host 0.0.0.0:2376 --host fd://\n" > /etc/systemd/system/docker.service.d/docker.conf
            sudo systemctl daemon-reload
            sudo service docker restart
            #curl -sSL https://shipyard-project.com/deploy | sudo TLS_CERT_PATH=/root/certs bash -s
            sudo docker swarm init --listen-addr 0.0.0.0:2377
            worker_token=`sudo docker swarm join-token worker -q`
            echo "+ worker token: ${worker_token}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"worker_token\", \"reason\": \"master init done\", \"data\": \"$worker_token\"}"
            ca_key=`awk '{printf "%s\\\\n", $0}' /root/certs/ca-key.pem`
            echo wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"ca_key\", \"reason\": \"master init done\", \"data\": \"$ca_key\"}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"ca_key\", \"reason\": \"master init done\", \"data\": \"$ca_key\"}"
            ca_cert=`awk '{printf "%s\\\\n", $0}' /root/certs/ca.pem`
            echo wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"ca_cert\", \"reason\": \"master init done\", \"data\": \"$ca_cert\"}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"ca_cert\", \"reason\": \"master init done\", \"data\": \"$ca_cert\"}"
            cert=`awk '{printf "%s\\\\n", $0}' /root/certs/cert.pem`
            echo wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"cert\", \"reason\": \"master init done\", \"data\": \"$cert\"}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"cert\", \"reason\": \"master init done\", \"data\": \"$cert\"}"
            key=`awk '{printf "%s\\\\n", $0}' /root/certs/key.pem`
            echo wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"key\", \"reason\": \"master init done\", \"data\": \"$key\"}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"key\", \"reason\": \"master init done\", \"data\": \"$key\"}"
            server_key=`awk '{printf "%s\\\\n", $0}' /root/certs/server-key.pem`
            echo wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"server_key\", \"reason\": \"master init done\", \"data\": \"$server_key\"}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"server_key\", \"reason\": \"master init done\", \"data\": \"$server_key\"}"
            server_cert=`awk '{printf "%s\\\\n", $0}' /root/certs/server.pem`
            echo wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"server_cert\", \"reason\": \"master init done\", \"data\": \"$server_cert\"}"
            wc_notify --data-binary "{\"status\": \"SUCCESS\", \"id\": \"server_cert\", \"reason\": \"master init done\", \"data\": \"$server_cert\"}"
            #docker service create --name portainer --publish 9000:9000 --constraint 'node.role == manager' --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock  portainer/portainer -H unix:///var/run/docker.sock
            echo "+ startup script done"
          params:
            wc_notify: { get_attr: ['master_wait_handle', 'curl_cli'] }
        
  #Other Docker Swarm members
  docker_nodes:
    type: OS::Heat::ResourceGroup
    depends_on: 
        - docker_master
        - master_wait_condition
    properties:
      count: { get_param: docker_node_count }
      resource_def:
        type: OS::Nova::Server
        properties:
            name: swarm_node_%index%
            image: { get_param: instance_image }
            flavor: { get_param: instance_flavor }
            key_name: { get_resource: ssh_key }
            networks:
                - network: { get_param: private_net_name }
            user_data_format: RAW
            user_data:
              str_replace:
                template: |
                  #!/bin/bash
                  echo "+ startup script starting"
                  curl -fsSL https://yum.dockerproject.org/gpg | sudo apt-key add -
                  sudo add-apt-repository "deb https://apt.dockerproject.org/repo/ ubuntu-$(lsb_release -cs) main"
                  sudo apt-get update
                  sudo apt-get -y install docker-engine
                  sudo service docker start
                  sudo mkdir -p /root/certs
                  sudo echo -e "$ca_cert" > /root/certs/ca.pem
                  sudo echo -e "$server_cert" > /root/certs/server.pem
                  sudo echo -e "$server_key" > /root/certs/server-keyw.pem
                  sudo mkdir -p /etc/systemd/system/docker.service.d
                  sudo echo -e "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/root/certs/ca.pem --tlscert=/root/certs/server.pem --tlskey=/root/certs/server-key.pem --host 0.0.0.0:2376 --host fd://\n" > /etc/systemd/system/docker.service.d/docker.conf
                  sudo systemctl daemon-reload
                  sudo service docker restart
                  #curl -sSL https://shipyard-project.com/deploy | sudo ACTION=node DISCOVERY=etcd://$master_ip:4001 bash -s
                  echo sudo docker swarm join --token $worker_token $master_ip:2377
                  sudo docker swarm join --token $worker_token $master_ip:2377
                  echo "+ startup script done"
                params:
                  $master_ip: { get_attr: [docker_master, first_address]}
                  $worker_token: { 'Fn::Select': [ 'worker_token', { get_attr: [master_wait_condition, data]} ] }
                  $ca_cert: { 'Fn::Select': [ 'ca_cert', { get_attr: [master_wait_condition, data]} ] }
                  $server_key: { 'Fn::Select': [ 'server_key', { get_attr: [master_wait_condition, data]} ] }
                  $server_cert: { 'Fn::Select': [ 'server_cert', { get_attr: [master_wait_condition, data]} ] }

outputs:
  ssh_private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }
  cert:
    description: Docker Client Certificate
    value: { 'Fn::Select': [ 'cert', { get_attr: [master_wait_condition, data]} ] }
  key:
    description: Docker Client Private Key
    value: { 'Fn::Select': [ 'key', { get_attr: [master_wait_condition, data]} ] }
  worker_token:
    description: SWARM Worker Token
    value: { 'Fn::Select': [ 'worker_token', { get_attr: [master_wait_condition, data]} ] }
  ca_key:
    description: Docker CA Private Key
    value: { 'Fn::Select': [ 'ca_key', { get_attr: [master_wait_condition, data]} ] }
  ca_cert:
    description: Docker CA Certificate
    value: { 'Fn::Select': [ 'ca_cert', { get_attr: [master_wait_condition, data]} ] }
  server_key:
    description: Docker Node Private Key
    value: { 'Fn::Select': [ 'server_key', { get_attr: [master_wait_condition, data]} ] }
  server_cert:
    description: Docker Node Certificate
    value: { 'Fn::Select': [ 'server_cert', { get_attr: [master_wait_condition, data]} ] }
